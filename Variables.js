/** * <p>The most important thing you can do is to choose an identifier name that is both meaningful and correct. For instance, if your program deals with customer accounts then your naming choices should reflect that (e.g., customerName, accountDetails). </p> * * <p>When you fail to specify var, the variable gets placed in the global context, potentially clobbering existing values. Also, if there's no declaration, it's hard to tell in what scope a variable lives (e.g., it could be in the Document or Window just as easily as in the local scope). So always declare with var. </p> * * <p>Use of global variables should be minimized.</p> * * <p>Use camelCase when defining variable names</p> * * <p>Use all caps followed by underscores when defining constant variable names</p> * * <p>Primitive types (number, string, boolean) are constant values.</p> * * <p>Omit var in long lists of variables</p> * * <p>Cache your jQuery objects: If any variable and or object you create is utilizing jQuery to create those objects make sure you use the $ sign in your variable naming convention</p> * * @example * // Use camelCase for naming varibale names. * var customerName = "Steve Wozniak" * * @example * // Use NAMES_LIKE_THIS for constant values. * var TIMEOUT_IN_MILLISECONDS = 60 * * @example * // Omit var in long lists of variables * var someItem     = 'some string', *     anotherItem  = 'another string', *     oneMoreItem  = 'one more string'; * * @example * // Cache jQuery Objects * var $nextBtn = $('.gallery-ui.next'); * * @example * // Reduce Globals * var name        = 'Steve'; * var lastName    = 'Wozniak'; * * function saySomething() {...} * * var MethodNameSpace = { *  name : 'Steve', *  lastName : 'Wozniak', *  saySomething : function() { *      // code here *  } * } * * * * */// Use camelCase for naming varibale names.var Variables = "Working With Variables - Naming & Convention";// Use NAMES_LIKE_THIS for constant values.var TIMEOUT_IN_MILLISECONDS = 60;// Omit var in long lists of variablesvar someItem     = 'some string',    anotherItem  = 'another string',    oneMoreItem  = 'one more string';// Cache jQuery Objectsvar $nextBtn = $('.gallery-ui.next');